package com.martins.produtoservice;

import java.math.BigDecimal;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.springframework.test.web.servlet.MockMvc;
import static  org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.testcontainers.containers.MongoDBContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.martins.produtoservice.dto.ProdutoRequest;
import com.martins.produtoservice.repository.ProdutoRepository;
import com.mongodb.assertions.Assertions;

@SpringBootTest
@Testcontainers
@AutoConfigureMockMvc
class ProdutoServiceApplicationTests {

	@Container
	static MongoDBContainer mongoDBContainer = new MongoDBContainer("mongo:4.2.2");
	
	@Autowired
	private MockMvc mockMvc;
	
	@Autowired
	private ObjectMapper objectMapper;
	
	@Autowired
	ProdutoRepository produtorepository;
	
	@DynamicPropertySource
	static void setProperties(DynamicPropertyRegistry dynamicPropertyRegistry) {
		dynamicPropertyRegistry.add("spring.data.mongodb.uri", mongoDBContainer::getReplicaSetUrl);
	}
	
	@Test
	void deveCriarProduto() throws Exception {
		ProdutoRequest produtoRequest = getProdutoRequest();
	
		String produtoRequestString = objectMapper.writeValueAsString(produtoRequest);
		
		mockMvc.perform(MockMvcRequestBuilders.post("/api/produto")
				.contentType(MediaType.APPLICATION_JSON)
				.content(produtoRequestString))
			.andExpect(status().isCreated());
		Assertions.assertTrue(produtorepository.findAll().size() == 1);
	}
	
	private ProdutoRequest getProdutoRequest() {
		return ProdutoRequest.builder()
				.nome("Iphone 14 Pro Max")
				.descricao("Iphone 14 Pro Max - Branco")
				.preco(BigDecimal.valueOf(8500))
				.build();
	}
	
	@Test
	void deveRetornarTodosOsProduto() throws Exception {
		
		mockMvc.perform(MockMvcRequestBuilders.get("/api/produto")
				.accept(MediaType.APPLICATION_JSON)) 
			.andExpect(status().isOk())
			.andExpect(MockMvcResultMatchers.jsonPath("$.[]").exists());
		
		Assertions.assertTrue(produtorepository.findAll().size() == 1);
	}
}
